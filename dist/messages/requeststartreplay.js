/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
goog.provide('proto.SC2APIProtocol.RequestStartReplay');
goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.SC2APIProtocol.InterfaceOptions');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.RequestStartReplay = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SC2APIProtocol.RequestStartReplay.oneofGroups_);
};
goog.inherits(proto.SC2APIProtocol.RequestStartReplay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    proto.SC2APIProtocol.RequestStartReplay.displayName = 'proto.SC2APIProtocol.RequestStartReplay';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SC2APIProtocol.RequestStartReplay.oneofGroups_ = [[1, 5]];
/**
 * @enum {number}
 */
proto.SC2APIProtocol.RequestStartReplay.ReplayCase = {
    REPLAY_NOT_SET: 0,
    REPLAY_PATH: 1,
    REPLAY_DATA: 5
};
/**
 * @return {proto.SC2APIProtocol.RequestStartReplay.ReplayCase}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.getReplayCase = function () {
    return /** @type {proto.SC2APIProtocol.RequestStartReplay.ReplayCase} */ (jspb.Message.computeOneofCase(this, proto.SC2APIProtocol.RequestStartReplay.oneofGroups_[0]));
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.SC2APIProtocol.RequestStartReplay.prototype.toObject = function (opt_includeInstance) {
        return proto.SC2APIProtocol.RequestStartReplay.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.SC2APIProtocol.RequestStartReplay} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.SC2APIProtocol.RequestStartReplay.toObject = function (includeInstance, msg) {
        var f, obj = {
            replayPath: jspb.Message.getField(msg, 1),
            replayData: msg.getReplayData_asB64(),
            mapData: msg.getMapData_asB64(),
            observedPlayerId: jspb.Message.getField(msg, 2),
            options: (f = msg.getOptions()) && proto.SC2APIProtocol.InterfaceOptions.toObject(includeInstance, f),
            disableFog: jspb.Message.getField(msg, 4)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.RequestStartReplay}
 */
proto.SC2APIProtocol.RequestStartReplay.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.SC2APIProtocol.RequestStartReplay;
    return proto.SC2APIProtocol.RequestStartReplay.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.RequestStartReplay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.RequestStartReplay}
 */
proto.SC2APIProtocol.RequestStartReplay.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = (reader.readString());
                msg.setReplayPath(value);
                break;
            case 5:
                var value = (reader.readBytes());
                msg.setReplayData(value);
                break;
            case 6:
                var value = (reader.readBytes());
                msg.setMapData(value);
                break;
            case 2:
                var value = (reader.readInt32());
                msg.setObservedPlayerId(value);
                break;
            case 3:
                var value = new proto.SC2APIProtocol.InterfaceOptions;
                reader.readMessage(value, proto.SC2APIProtocol.InterfaceOptions.deserializeBinaryFromReader);
                msg.setOptions(value);
                break;
            case 4:
                var value = (reader.readBool());
                msg.setDisableFog(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.SC2APIProtocol.RequestStartReplay.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.RequestStartReplay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RequestStartReplay.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = /** @type {string} */ (jspb.Message.getField(message, 1));
    if (f != null) {
        writer.writeString(1, f);
    }
    f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
    if (f != null) {
        writer.writeBytes(5, f);
    }
    f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
    if (f != null) {
        writer.writeBytes(6, f);
    }
    f = /** @type {number} */ (jspb.Message.getField(message, 2));
    if (f != null) {
        writer.writeInt32(2, f);
    }
    f = message.getOptions();
    if (f != null) {
        writer.writeMessage(3, f, proto.SC2APIProtocol.InterfaceOptions.serializeBinaryToWriter);
    }
    f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
    if (f != null) {
        writer.writeBool(4, f);
    }
};
/**
 * optional string replay_path = 1;
 * @return {string}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.getReplayPath = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/** @param {string} value */
proto.SC2APIProtocol.RequestStartReplay.prototype.setReplayPath = function (value) {
    jspb.Message.setOneofField(this, 1, proto.SC2APIProtocol.RequestStartReplay.oneofGroups_[0], value);
};
proto.SC2APIProtocol.RequestStartReplay.prototype.clearReplayPath = function () {
    jspb.Message.setOneofField(this, 1, proto.SC2APIProtocol.RequestStartReplay.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.hasReplayPath = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional bytes replay_data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.getReplayData = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};
/**
 * optional bytes replay_data = 5;
 * This is a type-conversion wrapper around `getReplayData()`
 * @return {string}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.getReplayData_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getReplayData()));
};
/**
 * optional bytes replay_data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReplayData()`
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.getReplayData_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getReplayData()));
};
/** @param {!(string|Uint8Array)} value */
proto.SC2APIProtocol.RequestStartReplay.prototype.setReplayData = function (value) {
    jspb.Message.setOneofField(this, 5, proto.SC2APIProtocol.RequestStartReplay.oneofGroups_[0], value);
};
proto.SC2APIProtocol.RequestStartReplay.prototype.clearReplayData = function () {
    jspb.Message.setOneofField(this, 5, proto.SC2APIProtocol.RequestStartReplay.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.hasReplayData = function () {
    return jspb.Message.getField(this, 5) != null;
};
/**
 * optional bytes map_data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.getMapData = function () {
    return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};
/**
 * optional bytes map_data = 6;
 * This is a type-conversion wrapper around `getMapData()`
 * @return {string}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.getMapData_asB64 = function () {
    return /** @type {string} */ (jspb.Message.bytesAsB64(this.getMapData()));
};
/**
 * optional bytes map_data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMapData()`
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.getMapData_asU8 = function () {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getMapData()));
};
/** @param {!(string|Uint8Array)} value */
proto.SC2APIProtocol.RequestStartReplay.prototype.setMapData = function (value) {
    jspb.Message.setField(this, 6, value);
};
proto.SC2APIProtocol.RequestStartReplay.prototype.clearMapData = function () {
    jspb.Message.setField(this, 6, undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.hasMapData = function () {
    return jspb.Message.getField(this, 6) != null;
};
/**
 * optional int32 observed_player_id = 2;
 * @return {number}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.getObservedPlayerId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/** @param {number} value */
proto.SC2APIProtocol.RequestStartReplay.prototype.setObservedPlayerId = function (value) {
    jspb.Message.setField(this, 2, value);
};
proto.SC2APIProtocol.RequestStartReplay.prototype.clearObservedPlayerId = function () {
    jspb.Message.setField(this, 2, undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.hasObservedPlayerId = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional InterfaceOptions options = 3;
 * @return {?proto.SC2APIProtocol.InterfaceOptions}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.getOptions = function () {
    return /** @type{?proto.SC2APIProtocol.InterfaceOptions} */ (jspb.Message.getWrapperField(this, proto.SC2APIProtocol.InterfaceOptions, 3));
};
/** @param {?proto.SC2APIProtocol.InterfaceOptions|undefined} value */
proto.SC2APIProtocol.RequestStartReplay.prototype.setOptions = function (value) {
    jspb.Message.setWrapperField(this, 3, value);
};
proto.SC2APIProtocol.RequestStartReplay.prototype.clearOptions = function () {
    this.setOptions(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.hasOptions = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional bool disable_fog = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.getDisableFog = function () {
    return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};
/** @param {boolean} value */
proto.SC2APIProtocol.RequestStartReplay.prototype.setDisableFog = function (value) {
    jspb.Message.setField(this, 4, value);
};
proto.SC2APIProtocol.RequestStartReplay.prototype.clearDisableFog = function () {
    jspb.Message.setField(this, 4, undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestStartReplay.prototype.hasDisableFog = function () {
    return jspb.Message.getField(this, 4) != null;
};
//# sourceMappingURL=requeststartreplay.js.map