/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.SC2APIProtocol.Observation');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.SC2APIProtocol.AvailableAbility');
goog.require('proto.SC2APIProtocol.ObservationFeatureLayer');
goog.require('proto.SC2APIProtocol.ObservationRaw');
goog.require('proto.SC2APIProtocol.ObservationRender');
goog.require('proto.SC2APIProtocol.ObservationUI');
goog.require('proto.SC2APIProtocol.PlayerCommon');
goog.require('proto.SC2APIProtocol.Score');

goog.forwardDeclare('proto.SC2APIProtocol.Alert');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.Observation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.Observation.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.Observation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.Observation.displayName = 'proto.SC2APIProtocol.Observation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.Observation.repeatedFields_ = [10,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.Observation.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.Observation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.Observation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.Observation.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameLoop: jspb.Message.getField(msg, 9),
    playerCommon: (f = msg.getPlayerCommon()) && proto.SC2APIProtocol.PlayerCommon.toObject(includeInstance, f),
    alertsList: jspb.Message.getRepeatedField(msg, 10),
    abilitiesList: jspb.Message.toObjectList(msg.getAbilitiesList(),
    proto.SC2APIProtocol.AvailableAbility.toObject, includeInstance),
    score: (f = msg.getScore()) && proto.SC2APIProtocol.Score.toObject(includeInstance, f),
    rawData: (f = msg.getRawData()) && proto.SC2APIProtocol.ObservationRaw.toObject(includeInstance, f),
    featureLayerData: (f = msg.getFeatureLayerData()) && proto.SC2APIProtocol.ObservationFeatureLayer.toObject(includeInstance, f),
    renderData: (f = msg.getRenderData()) && proto.SC2APIProtocol.ObservationRender.toObject(includeInstance, f),
    uiData: (f = msg.getUiData()) && proto.SC2APIProtocol.ObservationUI.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.Observation}
 */
proto.SC2APIProtocol.Observation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.Observation;
  return proto.SC2APIProtocol.Observation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.Observation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.Observation}
 */
proto.SC2APIProtocol.Observation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameLoop(value);
      break;
    case 1:
      var value = new proto.SC2APIProtocol.PlayerCommon;
      reader.readMessage(value,proto.SC2APIProtocol.PlayerCommon.deserializeBinaryFromReader);
      msg.setPlayerCommon(value);
      break;
    case 10:
      var value = /** @type {!proto.SC2APIProtocol.Alert} */ (reader.readEnum());
      msg.addAlerts(value);
      break;
    case 3:
      var value = new proto.SC2APIProtocol.AvailableAbility;
      reader.readMessage(value,proto.SC2APIProtocol.AvailableAbility.deserializeBinaryFromReader);
      msg.addAbilities(value);
      break;
    case 4:
      var value = new proto.SC2APIProtocol.Score;
      reader.readMessage(value,proto.SC2APIProtocol.Score.deserializeBinaryFromReader);
      msg.setScore(value);
      break;
    case 5:
      var value = new proto.SC2APIProtocol.ObservationRaw;
      reader.readMessage(value,proto.SC2APIProtocol.ObservationRaw.deserializeBinaryFromReader);
      msg.setRawData(value);
      break;
    case 6:
      var value = new proto.SC2APIProtocol.ObservationFeatureLayer;
      reader.readMessage(value,proto.SC2APIProtocol.ObservationFeatureLayer.deserializeBinaryFromReader);
      msg.setFeatureLayerData(value);
      break;
    case 7:
      var value = new proto.SC2APIProtocol.ObservationRender;
      reader.readMessage(value,proto.SC2APIProtocol.ObservationRender.deserializeBinaryFromReader);
      msg.setRenderData(value);
      break;
    case 8:
      var value = new proto.SC2APIProtocol.ObservationUI;
      reader.readMessage(value,proto.SC2APIProtocol.ObservationUI.deserializeBinaryFromReader);
      msg.setUiData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.Observation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.Observation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.Observation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.Observation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getPlayerCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SC2APIProtocol.PlayerCommon.serializeBinaryToWriter
    );
  }
  f = message.getAlertsList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      10,
      f
    );
  }
  f = message.getAbilitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.SC2APIProtocol.AvailableAbility.serializeBinaryToWriter
    );
  }
  f = message.getScore();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SC2APIProtocol.Score.serializeBinaryToWriter
    );
  }
  f = message.getRawData();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SC2APIProtocol.ObservationRaw.serializeBinaryToWriter
    );
  }
  f = message.getFeatureLayerData();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.SC2APIProtocol.ObservationFeatureLayer.serializeBinaryToWriter
    );
  }
  f = message.getRenderData();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.SC2APIProtocol.ObservationRender.serializeBinaryToWriter
    );
  }
  f = message.getUiData();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.SC2APIProtocol.ObservationUI.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 game_loop = 9;
 * @return {number}
 */
proto.SC2APIProtocol.Observation.prototype.getGameLoop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.Observation.prototype.setGameLoop = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.SC2APIProtocol.Observation.prototype.clearGameLoop = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Observation.prototype.hasGameLoop = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional PlayerCommon player_common = 1;
 * @return {?proto.SC2APIProtocol.PlayerCommon}
 */
proto.SC2APIProtocol.Observation.prototype.getPlayerCommon = function() {
  return /** @type{?proto.SC2APIProtocol.PlayerCommon} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.PlayerCommon, 1));
};


/** @param {?proto.SC2APIProtocol.PlayerCommon|undefined} value */
proto.SC2APIProtocol.Observation.prototype.setPlayerCommon = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SC2APIProtocol.Observation.prototype.clearPlayerCommon = function() {
  this.setPlayerCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Observation.prototype.hasPlayerCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Alert alerts = 10;
 * @return {!Array.<!proto.SC2APIProtocol.Alert>}
 */
proto.SC2APIProtocol.Observation.prototype.getAlertsList = function() {
  return /** @type {!Array.<!proto.SC2APIProtocol.Alert>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array.<!proto.SC2APIProtocol.Alert>} value */
proto.SC2APIProtocol.Observation.prototype.setAlertsList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!proto.SC2APIProtocol.Alert} value
 * @param {number=} opt_index
 */
proto.SC2APIProtocol.Observation.prototype.addAlerts = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.SC2APIProtocol.Observation.prototype.clearAlertsList = function() {
  this.setAlertsList([]);
};


/**
 * repeated AvailableAbility abilities = 3;
 * @return {!Array.<!proto.SC2APIProtocol.AvailableAbility>}
 */
proto.SC2APIProtocol.Observation.prototype.getAbilitiesList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.AvailableAbility>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.AvailableAbility, 3));
};


/** @param {!Array.<!proto.SC2APIProtocol.AvailableAbility>} value */
proto.SC2APIProtocol.Observation.prototype.setAbilitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.SC2APIProtocol.AvailableAbility=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.AvailableAbility}
 */
proto.SC2APIProtocol.Observation.prototype.addAbilities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.SC2APIProtocol.AvailableAbility, opt_index);
};


proto.SC2APIProtocol.Observation.prototype.clearAbilitiesList = function() {
  this.setAbilitiesList([]);
};


/**
 * optional Score score = 4;
 * @return {?proto.SC2APIProtocol.Score}
 */
proto.SC2APIProtocol.Observation.prototype.getScore = function() {
  return /** @type{?proto.SC2APIProtocol.Score} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.Score, 4));
};


/** @param {?proto.SC2APIProtocol.Score|undefined} value */
proto.SC2APIProtocol.Observation.prototype.setScore = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.SC2APIProtocol.Observation.prototype.clearScore = function() {
  this.setScore(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Observation.prototype.hasScore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ObservationRaw raw_data = 5;
 * @return {?proto.SC2APIProtocol.ObservationRaw}
 */
proto.SC2APIProtocol.Observation.prototype.getRawData = function() {
  return /** @type{?proto.SC2APIProtocol.ObservationRaw} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ObservationRaw, 5));
};


/** @param {?proto.SC2APIProtocol.ObservationRaw|undefined} value */
proto.SC2APIProtocol.Observation.prototype.setRawData = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.SC2APIProtocol.Observation.prototype.clearRawData = function() {
  this.setRawData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Observation.prototype.hasRawData = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ObservationFeatureLayer feature_layer_data = 6;
 * @return {?proto.SC2APIProtocol.ObservationFeatureLayer}
 */
proto.SC2APIProtocol.Observation.prototype.getFeatureLayerData = function() {
  return /** @type{?proto.SC2APIProtocol.ObservationFeatureLayer} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ObservationFeatureLayer, 6));
};


/** @param {?proto.SC2APIProtocol.ObservationFeatureLayer|undefined} value */
proto.SC2APIProtocol.Observation.prototype.setFeatureLayerData = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.SC2APIProtocol.Observation.prototype.clearFeatureLayerData = function() {
  this.setFeatureLayerData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Observation.prototype.hasFeatureLayerData = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ObservationRender render_data = 7;
 * @return {?proto.SC2APIProtocol.ObservationRender}
 */
proto.SC2APIProtocol.Observation.prototype.getRenderData = function() {
  return /** @type{?proto.SC2APIProtocol.ObservationRender} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ObservationRender, 7));
};


/** @param {?proto.SC2APIProtocol.ObservationRender|undefined} value */
proto.SC2APIProtocol.Observation.prototype.setRenderData = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.SC2APIProtocol.Observation.prototype.clearRenderData = function() {
  this.setRenderData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Observation.prototype.hasRenderData = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ObservationUI ui_data = 8;
 * @return {?proto.SC2APIProtocol.ObservationUI}
 */
proto.SC2APIProtocol.Observation.prototype.getUiData = function() {
  return /** @type{?proto.SC2APIProtocol.ObservationUI} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.ObservationUI, 8));
};


/** @param {?proto.SC2APIProtocol.ObservationUI|undefined} value */
proto.SC2APIProtocol.Observation.prototype.setUiData = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.SC2APIProtocol.Observation.prototype.clearUiData = function() {
  this.setUiData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Observation.prototype.hasUiData = function() {
  return jspb.Message.getField(this, 8) != null;
};


