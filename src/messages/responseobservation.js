/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.SC2APIProtocol.ResponseObservation');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.SC2APIProtocol.Action');
goog.require('proto.SC2APIProtocol.ActionError');
goog.require('proto.SC2APIProtocol.ChatReceived');
goog.require('proto.SC2APIProtocol.Observation');
goog.require('proto.SC2APIProtocol.PlayerResult');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ResponseObservation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.ResponseObservation.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.ResponseObservation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ResponseObservation.displayName = 'proto.SC2APIProtocol.ResponseObservation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.ResponseObservation.repeatedFields_ = [1,2,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ResponseObservation.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ResponseObservation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ResponseObservation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ResponseObservation.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.SC2APIProtocol.Action.toObject, includeInstance),
    actionErrorsList: jspb.Message.toObjectList(msg.getActionErrorsList(),
    proto.SC2APIProtocol.ActionError.toObject, includeInstance),
    observation: (f = msg.getObservation()) && proto.SC2APIProtocol.Observation.toObject(includeInstance, f),
    playerResultList: jspb.Message.toObjectList(msg.getPlayerResultList(),
    proto.SC2APIProtocol.PlayerResult.toObject, includeInstance),
    chatList: jspb.Message.toObjectList(msg.getChatList(),
    proto.SC2APIProtocol.ChatReceived.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ResponseObservation}
 */
proto.SC2APIProtocol.ResponseObservation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ResponseObservation;
  return proto.SC2APIProtocol.ResponseObservation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ResponseObservation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ResponseObservation}
 */
proto.SC2APIProtocol.ResponseObservation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.Action;
      reader.readMessage(value,proto.SC2APIProtocol.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    case 2:
      var value = new proto.SC2APIProtocol.ActionError;
      reader.readMessage(value,proto.SC2APIProtocol.ActionError.deserializeBinaryFromReader);
      msg.addActionErrors(value);
      break;
    case 3:
      var value = new proto.SC2APIProtocol.Observation;
      reader.readMessage(value,proto.SC2APIProtocol.Observation.deserializeBinaryFromReader);
      msg.setObservation(value);
      break;
    case 4:
      var value = new proto.SC2APIProtocol.PlayerResult;
      reader.readMessage(value,proto.SC2APIProtocol.PlayerResult.deserializeBinaryFromReader);
      msg.addPlayerResult(value);
      break;
    case 5:
      var value = new proto.SC2APIProtocol.ChatReceived;
      reader.readMessage(value,proto.SC2APIProtocol.ChatReceived.deserializeBinaryFromReader);
      msg.addChat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ResponseObservation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ResponseObservation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ResponseObservation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ResponseObservation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.SC2APIProtocol.Action.serializeBinaryToWriter
    );
  }
  f = message.getActionErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.SC2APIProtocol.ActionError.serializeBinaryToWriter
    );
  }
  f = message.getObservation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SC2APIProtocol.Observation.serializeBinaryToWriter
    );
  }
  f = message.getPlayerResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.SC2APIProtocol.PlayerResult.serializeBinaryToWriter
    );
  }
  f = message.getChatList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.SC2APIProtocol.ChatReceived.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Action actions = 1;
 * @return {!Array.<!proto.SC2APIProtocol.Action>}
 */
proto.SC2APIProtocol.ResponseObservation.prototype.getActionsList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.Action, 1));
};


/** @param {!Array.<!proto.SC2APIProtocol.Action>} value */
proto.SC2APIProtocol.ResponseObservation.prototype.setActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.SC2APIProtocol.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.Action}
 */
proto.SC2APIProtocol.ResponseObservation.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.SC2APIProtocol.Action, opt_index);
};


proto.SC2APIProtocol.ResponseObservation.prototype.clearActionsList = function() {
  this.setActionsList([]);
};


/**
 * repeated ActionError action_errors = 2;
 * @return {!Array.<!proto.SC2APIProtocol.ActionError>}
 */
proto.SC2APIProtocol.ResponseObservation.prototype.getActionErrorsList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.ActionError>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.ActionError, 2));
};


/** @param {!Array.<!proto.SC2APIProtocol.ActionError>} value */
proto.SC2APIProtocol.ResponseObservation.prototype.setActionErrorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.SC2APIProtocol.ActionError=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.ActionError}
 */
proto.SC2APIProtocol.ResponseObservation.prototype.addActionErrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.SC2APIProtocol.ActionError, opt_index);
};


proto.SC2APIProtocol.ResponseObservation.prototype.clearActionErrorsList = function() {
  this.setActionErrorsList([]);
};


/**
 * optional Observation observation = 3;
 * @return {?proto.SC2APIProtocol.Observation}
 */
proto.SC2APIProtocol.ResponseObservation.prototype.getObservation = function() {
  return /** @type{?proto.SC2APIProtocol.Observation} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.Observation, 3));
};


/** @param {?proto.SC2APIProtocol.Observation|undefined} value */
proto.SC2APIProtocol.ResponseObservation.prototype.setObservation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.SC2APIProtocol.ResponseObservation.prototype.clearObservation = function() {
  this.setObservation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseObservation.prototype.hasObservation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated PlayerResult player_result = 4;
 * @return {!Array.<!proto.SC2APIProtocol.PlayerResult>}
 */
proto.SC2APIProtocol.ResponseObservation.prototype.getPlayerResultList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.PlayerResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.PlayerResult, 4));
};


/** @param {!Array.<!proto.SC2APIProtocol.PlayerResult>} value */
proto.SC2APIProtocol.ResponseObservation.prototype.setPlayerResultList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.SC2APIProtocol.PlayerResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.PlayerResult}
 */
proto.SC2APIProtocol.ResponseObservation.prototype.addPlayerResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.SC2APIProtocol.PlayerResult, opt_index);
};


proto.SC2APIProtocol.ResponseObservation.prototype.clearPlayerResultList = function() {
  this.setPlayerResultList([]);
};


/**
 * repeated ChatReceived chat = 5;
 * @return {!Array.<!proto.SC2APIProtocol.ChatReceived>}
 */
proto.SC2APIProtocol.ResponseObservation.prototype.getChatList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.ChatReceived>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.ChatReceived, 5));
};


/** @param {!Array.<!proto.SC2APIProtocol.ChatReceived>} value */
proto.SC2APIProtocol.ResponseObservation.prototype.setChatList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.SC2APIProtocol.ChatReceived=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.ChatReceived}
 */
proto.SC2APIProtocol.ResponseObservation.prototype.addChat = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.SC2APIProtocol.ChatReceived, opt_index);
};


proto.SC2APIProtocol.ResponseObservation.prototype.clearChatList = function() {
  this.setChatList([]);
};


