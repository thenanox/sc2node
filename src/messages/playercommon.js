/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.SC2APIProtocol.PlayerCommon');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.PlayerCommon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SC2APIProtocol.PlayerCommon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.PlayerCommon.displayName = 'proto.SC2APIProtocol.PlayerCommon';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.PlayerCommon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.PlayerCommon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.PlayerCommon.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getField(msg, 1),
    minerals: jspb.Message.getField(msg, 2),
    vespene: jspb.Message.getField(msg, 3),
    foodCap: jspb.Message.getField(msg, 4),
    foodUsed: jspb.Message.getField(msg, 5),
    foodArmy: jspb.Message.getField(msg, 6),
    foodWorkers: jspb.Message.getField(msg, 7),
    idleWorkerCount: jspb.Message.getField(msg, 8),
    armyCount: jspb.Message.getField(msg, 9),
    warpGateCount: jspb.Message.getField(msg, 10),
    larvaCount: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.PlayerCommon}
 */
proto.SC2APIProtocol.PlayerCommon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.PlayerCommon;
  return proto.SC2APIProtocol.PlayerCommon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.PlayerCommon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.PlayerCommon}
 */
proto.SC2APIProtocol.PlayerCommon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinerals(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVespene(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFoodCap(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFoodUsed(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFoodArmy(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFoodWorkers(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIdleWorkerCount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArmyCount(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWarpGateCount(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLarvaCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.PlayerCommon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.PlayerCommon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.PlayerCommon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
};


/**
 * optional uint32 player_id = 1;
 * @return {number}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.getPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.PlayerCommon.prototype.setPlayerId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.PlayerCommon.prototype.clearPlayerId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.hasPlayerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 minerals = 2;
 * @return {number}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.getMinerals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.PlayerCommon.prototype.setMinerals = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.PlayerCommon.prototype.clearMinerals = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.hasMinerals = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 vespene = 3;
 * @return {number}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.getVespene = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.PlayerCommon.prototype.setVespene = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SC2APIProtocol.PlayerCommon.prototype.clearVespene = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.hasVespene = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 food_cap = 4;
 * @return {number}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.getFoodCap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.PlayerCommon.prototype.setFoodCap = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.PlayerCommon.prototype.clearFoodCap = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.hasFoodCap = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 food_used = 5;
 * @return {number}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.getFoodUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.PlayerCommon.prototype.setFoodUsed = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SC2APIProtocol.PlayerCommon.prototype.clearFoodUsed = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.hasFoodUsed = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 food_army = 6;
 * @return {number}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.getFoodArmy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.PlayerCommon.prototype.setFoodArmy = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.SC2APIProtocol.PlayerCommon.prototype.clearFoodArmy = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.hasFoodArmy = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 food_workers = 7;
 * @return {number}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.getFoodWorkers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.PlayerCommon.prototype.setFoodWorkers = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.SC2APIProtocol.PlayerCommon.prototype.clearFoodWorkers = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.hasFoodWorkers = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 idle_worker_count = 8;
 * @return {number}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.getIdleWorkerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.PlayerCommon.prototype.setIdleWorkerCount = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.SC2APIProtocol.PlayerCommon.prototype.clearIdleWorkerCount = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.hasIdleWorkerCount = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 army_count = 9;
 * @return {number}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.getArmyCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.PlayerCommon.prototype.setArmyCount = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.SC2APIProtocol.PlayerCommon.prototype.clearArmyCount = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.hasArmyCount = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 warp_gate_count = 10;
 * @return {number}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.getWarpGateCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.PlayerCommon.prototype.setWarpGateCount = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.SC2APIProtocol.PlayerCommon.prototype.clearWarpGateCount = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.hasWarpGateCount = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 larva_count = 11;
 * @return {number}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.getLarvaCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.PlayerCommon.prototype.setLarvaCount = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.SC2APIProtocol.PlayerCommon.prototype.clearLarvaCount = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.PlayerCommon.prototype.hasLarvaCount = function() {
  return jspb.Message.getField(this, 11) != null;
};


