/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.SC2APIProtocol.RequestJoinGame');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.SC2APIProtocol.InterfaceOptions');
goog.require('proto.SC2APIProtocol.PortSet');

goog.forwardDeclare('proto.SC2APIProtocol.Race');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.RequestJoinGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.RequestJoinGame.repeatedFields_, proto.SC2APIProtocol.RequestJoinGame.oneofGroups_);
};
goog.inherits(proto.SC2APIProtocol.RequestJoinGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.RequestJoinGame.displayName = 'proto.SC2APIProtocol.RequestJoinGame';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.RequestJoinGame.repeatedFields_ = [5];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SC2APIProtocol.RequestJoinGame.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.SC2APIProtocol.RequestJoinGame.ParticipationCase = {
  PARTICIPATION_NOT_SET: 0,
  RACE: 1,
  OBSERVED_PLAYER_ID: 2
};

/**
 * @return {proto.SC2APIProtocol.RequestJoinGame.ParticipationCase}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.getParticipationCase = function() {
  return /** @type {proto.SC2APIProtocol.RequestJoinGame.ParticipationCase} */(jspb.Message.computeOneofCase(this, proto.SC2APIProtocol.RequestJoinGame.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.RequestJoinGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.RequestJoinGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RequestJoinGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    race: jspb.Message.getField(msg, 1),
    observedPlayerId: jspb.Message.getField(msg, 2),
    options: (f = msg.getOptions()) && proto.SC2APIProtocol.InterfaceOptions.toObject(includeInstance, f),
    serverPorts: (f = msg.getServerPorts()) && proto.SC2APIProtocol.PortSet.toObject(includeInstance, f),
    clientPortsList: jspb.Message.toObjectList(msg.getClientPortsList(),
    proto.SC2APIProtocol.PortSet.toObject, includeInstance),
    sharedPort: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.RequestJoinGame}
 */
proto.SC2APIProtocol.RequestJoinGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.RequestJoinGame;
  return proto.SC2APIProtocol.RequestJoinGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.RequestJoinGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.RequestJoinGame}
 */
proto.SC2APIProtocol.RequestJoinGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SC2APIProtocol.Race} */ (reader.readEnum());
      msg.setRace(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObservedPlayerId(value);
      break;
    case 3:
      var value = new proto.SC2APIProtocol.InterfaceOptions;
      reader.readMessage(value,proto.SC2APIProtocol.InterfaceOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    case 4:
      var value = new proto.SC2APIProtocol.PortSet;
      reader.readMessage(value,proto.SC2APIProtocol.PortSet.deserializeBinaryFromReader);
      msg.setServerPorts(value);
      break;
    case 5:
      var value = new proto.SC2APIProtocol.PortSet;
      reader.readMessage(value,proto.SC2APIProtocol.PortSet.deserializeBinaryFromReader);
      msg.addClientPorts(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSharedPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.RequestJoinGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.RequestJoinGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.RequestJoinGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.SC2APIProtocol.Race} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SC2APIProtocol.InterfaceOptions.serializeBinaryToWriter
    );
  }
  f = message.getServerPorts();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SC2APIProtocol.PortSet.serializeBinaryToWriter
    );
  }
  f = message.getClientPortsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.SC2APIProtocol.PortSet.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional Race race = 1;
 * @return {!proto.SC2APIProtocol.Race}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.getRace = function() {
  return /** @type {!proto.SC2APIProtocol.Race} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.SC2APIProtocol.Race} value */
proto.SC2APIProtocol.RequestJoinGame.prototype.setRace = function(value) {
  jspb.Message.setOneofField(this, 1, proto.SC2APIProtocol.RequestJoinGame.oneofGroups_[0], value);
};


proto.SC2APIProtocol.RequestJoinGame.prototype.clearRace = function() {
  jspb.Message.setOneofField(this, 1, proto.SC2APIProtocol.RequestJoinGame.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.hasRace = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 observed_player_id = 2;
 * @return {number}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.getObservedPlayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.RequestJoinGame.prototype.setObservedPlayerId = function(value) {
  jspb.Message.setOneofField(this, 2, proto.SC2APIProtocol.RequestJoinGame.oneofGroups_[0], value);
};


proto.SC2APIProtocol.RequestJoinGame.prototype.clearObservedPlayerId = function() {
  jspb.Message.setOneofField(this, 2, proto.SC2APIProtocol.RequestJoinGame.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.hasObservedPlayerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InterfaceOptions options = 3;
 * @return {?proto.SC2APIProtocol.InterfaceOptions}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.getOptions = function() {
  return /** @type{?proto.SC2APIProtocol.InterfaceOptions} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.InterfaceOptions, 3));
};


/** @param {?proto.SC2APIProtocol.InterfaceOptions|undefined} value */
proto.SC2APIProtocol.RequestJoinGame.prototype.setOptions = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.SC2APIProtocol.RequestJoinGame.prototype.clearOptions = function() {
  this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PortSet server_ports = 4;
 * @return {?proto.SC2APIProtocol.PortSet}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.getServerPorts = function() {
  return /** @type{?proto.SC2APIProtocol.PortSet} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.PortSet, 4));
};


/** @param {?proto.SC2APIProtocol.PortSet|undefined} value */
proto.SC2APIProtocol.RequestJoinGame.prototype.setServerPorts = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.SC2APIProtocol.RequestJoinGame.prototype.clearServerPorts = function() {
  this.setServerPorts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.hasServerPorts = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated PortSet client_ports = 5;
 * @return {!Array.<!proto.SC2APIProtocol.PortSet>}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.getClientPortsList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.PortSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.PortSet, 5));
};


/** @param {!Array.<!proto.SC2APIProtocol.PortSet>} value */
proto.SC2APIProtocol.RequestJoinGame.prototype.setClientPortsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.SC2APIProtocol.PortSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.PortSet}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.addClientPorts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.SC2APIProtocol.PortSet, opt_index);
};


proto.SC2APIProtocol.RequestJoinGame.prototype.clearClientPortsList = function() {
  this.setClientPortsList([]);
};


/**
 * optional int32 shared_port = 6;
 * @return {number}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.getSharedPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.RequestJoinGame.prototype.setSharedPort = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.SC2APIProtocol.RequestJoinGame.prototype.clearSharedPort = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.RequestJoinGame.prototype.hasSharedPort = function() {
  return jspb.Message.getField(this, 6) != null;
};


