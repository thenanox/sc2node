/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.SC2APIProtocol.ResponseReplayInfo');
goog.provide('proto.SC2APIProtocol.ResponseReplayInfo.Error');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.SC2APIProtocol.PlayerInfoExtra');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.ResponseReplayInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SC2APIProtocol.ResponseReplayInfo.repeatedFields_, null);
};
goog.inherits(proto.SC2APIProtocol.ResponseReplayInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.ResponseReplayInfo.displayName = 'proto.SC2APIProtocol.ResponseReplayInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SC2APIProtocol.ResponseReplayInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.ResponseReplayInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.ResponseReplayInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ResponseReplayInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    mapName: jspb.Message.getField(msg, 1),
    localMapPath: jspb.Message.getField(msg, 2),
    playerInfoList: jspb.Message.toObjectList(msg.getPlayerInfoList(),
    proto.SC2APIProtocol.PlayerInfoExtra.toObject, includeInstance),
    gameDurationLoops: jspb.Message.getField(msg, 4),
    gameDurationSeconds: jspb.Message.getOptionalFloatingPointField(msg, 5),
    gameVersion: jspb.Message.getField(msg, 6),
    dataVersion: jspb.Message.getField(msg, 11),
    dataBuild: jspb.Message.getField(msg, 7),
    baseBuild: jspb.Message.getField(msg, 8),
    error: jspb.Message.getField(msg, 9),
    errorDetails: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.ResponseReplayInfo}
 */
proto.SC2APIProtocol.ResponseReplayInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.ResponseReplayInfo;
  return proto.SC2APIProtocol.ResponseReplayInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.ResponseReplayInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.ResponseReplayInfo}
 */
proto.SC2APIProtocol.ResponseReplayInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalMapPath(value);
      break;
    case 3:
      var value = new proto.SC2APIProtocol.PlayerInfoExtra;
      reader.readMessage(value,proto.SC2APIProtocol.PlayerInfoExtra.deserializeBinaryFromReader);
      msg.addPlayerInfo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameDurationLoops(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGameDurationSeconds(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameVersion(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataVersion(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDataBuild(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBaseBuild(value);
      break;
    case 9:
      var value = /** @type {!proto.SC2APIProtocol.ResponseReplayInfo.Error} */ (reader.readEnum());
      msg.setError(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.ResponseReplayInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.ResponseReplayInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.ResponseReplayInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayerInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.SC2APIProtocol.PlayerInfoExtra.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {!proto.SC2APIProtocol.ResponseReplayInfo.Error} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.SC2APIProtocol.ResponseReplayInfo.Error = {
  MISSINGREPLAY: 1,
  INVALIDREPLAYPATH: 2,
  INVALIDREPLAYDATA: 3,
  PARSINGERROR: 4,
  DOWNLOADERROR: 5
};

/**
 * optional string map_name = 1;
 * @return {string}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.getMapName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.setMapName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SC2APIProtocol.ResponseReplayInfo.prototype.clearMapName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.hasMapName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string local_map_path = 2;
 * @return {string}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.getLocalMapPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.setLocalMapPath = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SC2APIProtocol.ResponseReplayInfo.prototype.clearLocalMapPath = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.hasLocalMapPath = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated PlayerInfoExtra player_info = 3;
 * @return {!Array.<!proto.SC2APIProtocol.PlayerInfoExtra>}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.getPlayerInfoList = function() {
  return /** @type{!Array.<!proto.SC2APIProtocol.PlayerInfoExtra>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SC2APIProtocol.PlayerInfoExtra, 3));
};


/** @param {!Array.<!proto.SC2APIProtocol.PlayerInfoExtra>} value */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.setPlayerInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.SC2APIProtocol.PlayerInfoExtra=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SC2APIProtocol.PlayerInfoExtra}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.addPlayerInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.SC2APIProtocol.PlayerInfoExtra, opt_index);
};


proto.SC2APIProtocol.ResponseReplayInfo.prototype.clearPlayerInfoList = function() {
  this.setPlayerInfoList([]);
};


/**
 * optional uint32 game_duration_loops = 4;
 * @return {number}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.getGameDurationLoops = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.setGameDurationLoops = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SC2APIProtocol.ResponseReplayInfo.prototype.clearGameDurationLoops = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.hasGameDurationLoops = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float game_duration_seconds = 5;
 * @return {number}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.getGameDurationSeconds = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.setGameDurationSeconds = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SC2APIProtocol.ResponseReplayInfo.prototype.clearGameDurationSeconds = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.hasGameDurationSeconds = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string game_version = 6;
 * @return {string}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.getGameVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.setGameVersion = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.SC2APIProtocol.ResponseReplayInfo.prototype.clearGameVersion = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.hasGameVersion = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string data_version = 11;
 * @return {string}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.getDataVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.setDataVersion = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.SC2APIProtocol.ResponseReplayInfo.prototype.clearDataVersion = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.hasDataVersion = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint32 data_build = 7;
 * @return {number}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.getDataBuild = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.setDataBuild = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.SC2APIProtocol.ResponseReplayInfo.prototype.clearDataBuild = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.hasDataBuild = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 base_build = 8;
 * @return {number}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.getBaseBuild = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.setBaseBuild = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.SC2APIProtocol.ResponseReplayInfo.prototype.clearBaseBuild = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.hasBaseBuild = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Error error = 9;
 * @return {!proto.SC2APIProtocol.ResponseReplayInfo.Error}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.getError = function() {
  return /** @type {!proto.SC2APIProtocol.ResponseReplayInfo.Error} */ (jspb.Message.getFieldWithDefault(this, 9, 1));
};


/** @param {!proto.SC2APIProtocol.ResponseReplayInfo.Error} value */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.setError = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.SC2APIProtocol.ResponseReplayInfo.prototype.clearError = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.hasError = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string error_details = 10;
 * @return {string}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.getErrorDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.setErrorDetails = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.SC2APIProtocol.ResponseReplayInfo.prototype.clearErrorDetails = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.ResponseReplayInfo.prototype.hasErrorDetails = function() {
  return jspb.Message.getField(this, 10) != null;
};


