/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.SC2APIProtocol.Request');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.SC2APIProtocol.RequestAction');
goog.require('proto.SC2APIProtocol.RequestAvailableMaps');
goog.require('proto.SC2APIProtocol.RequestCreateGame');
goog.require('proto.SC2APIProtocol.RequestData');
goog.require('proto.SC2APIProtocol.RequestDebug');
goog.require('proto.SC2APIProtocol.RequestGameInfo');
goog.require('proto.SC2APIProtocol.RequestJoinGame');
goog.require('proto.SC2APIProtocol.RequestLeaveGame');
goog.require('proto.SC2APIProtocol.RequestObservation');
goog.require('proto.SC2APIProtocol.RequestPing');
goog.require('proto.SC2APIProtocol.RequestQuery');
goog.require('proto.SC2APIProtocol.RequestQuickLoad');
goog.require('proto.SC2APIProtocol.RequestQuickSave');
goog.require('proto.SC2APIProtocol.RequestQuit');
goog.require('proto.SC2APIProtocol.RequestReplayInfo');
goog.require('proto.SC2APIProtocol.RequestRestartGame');
goog.require('proto.SC2APIProtocol.RequestSaveMap');
goog.require('proto.SC2APIProtocol.RequestSaveReplay');
goog.require('proto.SC2APIProtocol.RequestStartReplay');
goog.require('proto.SC2APIProtocol.RequestStep');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SC2APIProtocol.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SC2APIProtocol.Request.oneofGroups_);
};
goog.inherits(proto.SC2APIProtocol.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SC2APIProtocol.Request.displayName = 'proto.SC2APIProtocol.Request';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SC2APIProtocol.Request.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]];

/**
 * @enum {number}
 */
proto.SC2APIProtocol.Request.RequestCase = {
  REQUEST_NOT_SET: 0,
  CREATE_GAME: 1,
  JOIN_GAME: 2,
  RESTART_GAME: 3,
  START_REPLAY: 4,
  LEAVE_GAME: 5,
  QUICK_SAVE: 6,
  QUICK_LOAD: 7,
  QUIT: 8,
  GAME_INFO: 9,
  OBSERVATION: 10,
  ACTION: 11,
  STEP: 12,
  DATA: 13,
  QUERY: 14,
  SAVE_REPLAY: 15,
  REPLAY_INFO: 16,
  AVAILABLE_MAPS: 17,
  SAVE_MAP: 18,
  PING: 19,
  DEBUG: 20
};

/**
 * @return {proto.SC2APIProtocol.Request.RequestCase}
 */
proto.SC2APIProtocol.Request.prototype.getRequestCase = function() {
  return /** @type {proto.SC2APIProtocol.Request.RequestCase} */(jspb.Message.computeOneofCase(this, proto.SC2APIProtocol.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SC2APIProtocol.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.SC2APIProtocol.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SC2APIProtocol.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    createGame: (f = msg.getCreateGame()) && proto.SC2APIProtocol.RequestCreateGame.toObject(includeInstance, f),
    joinGame: (f = msg.getJoinGame()) && proto.SC2APIProtocol.RequestJoinGame.toObject(includeInstance, f),
    restartGame: (f = msg.getRestartGame()) && proto.SC2APIProtocol.RequestRestartGame.toObject(includeInstance, f),
    startReplay: (f = msg.getStartReplay()) && proto.SC2APIProtocol.RequestStartReplay.toObject(includeInstance, f),
    leaveGame: (f = msg.getLeaveGame()) && proto.SC2APIProtocol.RequestLeaveGame.toObject(includeInstance, f),
    quickSave: (f = msg.getQuickSave()) && proto.SC2APIProtocol.RequestQuickSave.toObject(includeInstance, f),
    quickLoad: (f = msg.getQuickLoad()) && proto.SC2APIProtocol.RequestQuickLoad.toObject(includeInstance, f),
    quit: (f = msg.getQuit()) && proto.SC2APIProtocol.RequestQuit.toObject(includeInstance, f),
    gameInfo: (f = msg.getGameInfo()) && proto.SC2APIProtocol.RequestGameInfo.toObject(includeInstance, f),
    observation: (f = msg.getObservation()) && proto.SC2APIProtocol.RequestObservation.toObject(includeInstance, f),
    action: (f = msg.getAction()) && proto.SC2APIProtocol.RequestAction.toObject(includeInstance, f),
    step: (f = msg.getStep()) && proto.SC2APIProtocol.RequestStep.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.SC2APIProtocol.RequestData.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && proto.SC2APIProtocol.RequestQuery.toObject(includeInstance, f),
    saveReplay: (f = msg.getSaveReplay()) && proto.SC2APIProtocol.RequestSaveReplay.toObject(includeInstance, f),
    replayInfo: (f = msg.getReplayInfo()) && proto.SC2APIProtocol.RequestReplayInfo.toObject(includeInstance, f),
    availableMaps: (f = msg.getAvailableMaps()) && proto.SC2APIProtocol.RequestAvailableMaps.toObject(includeInstance, f),
    saveMap: (f = msg.getSaveMap()) && proto.SC2APIProtocol.RequestSaveMap.toObject(includeInstance, f),
    ping: (f = msg.getPing()) && proto.SC2APIProtocol.RequestPing.toObject(includeInstance, f),
    debug: (f = msg.getDebug()) && proto.SC2APIProtocol.RequestDebug.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SC2APIProtocol.Request}
 */
proto.SC2APIProtocol.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SC2APIProtocol.Request;
  return proto.SC2APIProtocol.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SC2APIProtocol.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SC2APIProtocol.Request}
 */
proto.SC2APIProtocol.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SC2APIProtocol.RequestCreateGame;
      reader.readMessage(value,proto.SC2APIProtocol.RequestCreateGame.deserializeBinaryFromReader);
      msg.setCreateGame(value);
      break;
    case 2:
      var value = new proto.SC2APIProtocol.RequestJoinGame;
      reader.readMessage(value,proto.SC2APIProtocol.RequestJoinGame.deserializeBinaryFromReader);
      msg.setJoinGame(value);
      break;
    case 3:
      var value = new proto.SC2APIProtocol.RequestRestartGame;
      reader.readMessage(value,proto.SC2APIProtocol.RequestRestartGame.deserializeBinaryFromReader);
      msg.setRestartGame(value);
      break;
    case 4:
      var value = new proto.SC2APIProtocol.RequestStartReplay;
      reader.readMessage(value,proto.SC2APIProtocol.RequestStartReplay.deserializeBinaryFromReader);
      msg.setStartReplay(value);
      break;
    case 5:
      var value = new proto.SC2APIProtocol.RequestLeaveGame;
      reader.readMessage(value,proto.SC2APIProtocol.RequestLeaveGame.deserializeBinaryFromReader);
      msg.setLeaveGame(value);
      break;
    case 6:
      var value = new proto.SC2APIProtocol.RequestQuickSave;
      reader.readMessage(value,proto.SC2APIProtocol.RequestQuickSave.deserializeBinaryFromReader);
      msg.setQuickSave(value);
      break;
    case 7:
      var value = new proto.SC2APIProtocol.RequestQuickLoad;
      reader.readMessage(value,proto.SC2APIProtocol.RequestQuickLoad.deserializeBinaryFromReader);
      msg.setQuickLoad(value);
      break;
    case 8:
      var value = new proto.SC2APIProtocol.RequestQuit;
      reader.readMessage(value,proto.SC2APIProtocol.RequestQuit.deserializeBinaryFromReader);
      msg.setQuit(value);
      break;
    case 9:
      var value = new proto.SC2APIProtocol.RequestGameInfo;
      reader.readMessage(value,proto.SC2APIProtocol.RequestGameInfo.deserializeBinaryFromReader);
      msg.setGameInfo(value);
      break;
    case 10:
      var value = new proto.SC2APIProtocol.RequestObservation;
      reader.readMessage(value,proto.SC2APIProtocol.RequestObservation.deserializeBinaryFromReader);
      msg.setObservation(value);
      break;
    case 11:
      var value = new proto.SC2APIProtocol.RequestAction;
      reader.readMessage(value,proto.SC2APIProtocol.RequestAction.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    case 12:
      var value = new proto.SC2APIProtocol.RequestStep;
      reader.readMessage(value,proto.SC2APIProtocol.RequestStep.deserializeBinaryFromReader);
      msg.setStep(value);
      break;
    case 13:
      var value = new proto.SC2APIProtocol.RequestData;
      reader.readMessage(value,proto.SC2APIProtocol.RequestData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 14:
      var value = new proto.SC2APIProtocol.RequestQuery;
      reader.readMessage(value,proto.SC2APIProtocol.RequestQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 15:
      var value = new proto.SC2APIProtocol.RequestSaveReplay;
      reader.readMessage(value,proto.SC2APIProtocol.RequestSaveReplay.deserializeBinaryFromReader);
      msg.setSaveReplay(value);
      break;
    case 16:
      var value = new proto.SC2APIProtocol.RequestReplayInfo;
      reader.readMessage(value,proto.SC2APIProtocol.RequestReplayInfo.deserializeBinaryFromReader);
      msg.setReplayInfo(value);
      break;
    case 17:
      var value = new proto.SC2APIProtocol.RequestAvailableMaps;
      reader.readMessage(value,proto.SC2APIProtocol.RequestAvailableMaps.deserializeBinaryFromReader);
      msg.setAvailableMaps(value);
      break;
    case 18:
      var value = new proto.SC2APIProtocol.RequestSaveMap;
      reader.readMessage(value,proto.SC2APIProtocol.RequestSaveMap.deserializeBinaryFromReader);
      msg.setSaveMap(value);
      break;
    case 19:
      var value = new proto.SC2APIProtocol.RequestPing;
      reader.readMessage(value,proto.SC2APIProtocol.RequestPing.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    case 20:
      var value = new proto.SC2APIProtocol.RequestDebug;
      reader.readMessage(value,proto.SC2APIProtocol.RequestDebug.deserializeBinaryFromReader);
      msg.setDebug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SC2APIProtocol.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SC2APIProtocol.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SC2APIProtocol.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SC2APIProtocol.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreateGame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SC2APIProtocol.RequestCreateGame.serializeBinaryToWriter
    );
  }
  f = message.getJoinGame();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.SC2APIProtocol.RequestJoinGame.serializeBinaryToWriter
    );
  }
  f = message.getRestartGame();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SC2APIProtocol.RequestRestartGame.serializeBinaryToWriter
    );
  }
  f = message.getStartReplay();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SC2APIProtocol.RequestStartReplay.serializeBinaryToWriter
    );
  }
  f = message.getLeaveGame();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SC2APIProtocol.RequestLeaveGame.serializeBinaryToWriter
    );
  }
  f = message.getQuickSave();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.SC2APIProtocol.RequestQuickSave.serializeBinaryToWriter
    );
  }
  f = message.getQuickLoad();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.SC2APIProtocol.RequestQuickLoad.serializeBinaryToWriter
    );
  }
  f = message.getQuit();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.SC2APIProtocol.RequestQuit.serializeBinaryToWriter
    );
  }
  f = message.getGameInfo();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.SC2APIProtocol.RequestGameInfo.serializeBinaryToWriter
    );
  }
  f = message.getObservation();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.SC2APIProtocol.RequestObservation.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.SC2APIProtocol.RequestAction.serializeBinaryToWriter
    );
  }
  f = message.getStep();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.SC2APIProtocol.RequestStep.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.SC2APIProtocol.RequestData.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.SC2APIProtocol.RequestQuery.serializeBinaryToWriter
    );
  }
  f = message.getSaveReplay();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.SC2APIProtocol.RequestSaveReplay.serializeBinaryToWriter
    );
  }
  f = message.getReplayInfo();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.SC2APIProtocol.RequestReplayInfo.serializeBinaryToWriter
    );
  }
  f = message.getAvailableMaps();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.SC2APIProtocol.RequestAvailableMaps.serializeBinaryToWriter
    );
  }
  f = message.getSaveMap();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.SC2APIProtocol.RequestSaveMap.serializeBinaryToWriter
    );
  }
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.SC2APIProtocol.RequestPing.serializeBinaryToWriter
    );
  }
  f = message.getDebug();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.SC2APIProtocol.RequestDebug.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestCreateGame create_game = 1;
 * @return {?proto.SC2APIProtocol.RequestCreateGame}
 */
proto.SC2APIProtocol.Request.prototype.getCreateGame = function() {
  return /** @type{?proto.SC2APIProtocol.RequestCreateGame} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestCreateGame, 1));
};


/** @param {?proto.SC2APIProtocol.RequestCreateGame|undefined} value */
proto.SC2APIProtocol.Request.prototype.setCreateGame = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearCreateGame = function() {
  this.setCreateGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasCreateGame = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RequestJoinGame join_game = 2;
 * @return {?proto.SC2APIProtocol.RequestJoinGame}
 */
proto.SC2APIProtocol.Request.prototype.getJoinGame = function() {
  return /** @type{?proto.SC2APIProtocol.RequestJoinGame} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestJoinGame, 2));
};


/** @param {?proto.SC2APIProtocol.RequestJoinGame|undefined} value */
proto.SC2APIProtocol.Request.prototype.setJoinGame = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearJoinGame = function() {
  this.setJoinGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasJoinGame = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RequestRestartGame restart_game = 3;
 * @return {?proto.SC2APIProtocol.RequestRestartGame}
 */
proto.SC2APIProtocol.Request.prototype.getRestartGame = function() {
  return /** @type{?proto.SC2APIProtocol.RequestRestartGame} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestRestartGame, 3));
};


/** @param {?proto.SC2APIProtocol.RequestRestartGame|undefined} value */
proto.SC2APIProtocol.Request.prototype.setRestartGame = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearRestartGame = function() {
  this.setRestartGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasRestartGame = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RequestStartReplay start_replay = 4;
 * @return {?proto.SC2APIProtocol.RequestStartReplay}
 */
proto.SC2APIProtocol.Request.prototype.getStartReplay = function() {
  return /** @type{?proto.SC2APIProtocol.RequestStartReplay} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestStartReplay, 4));
};


/** @param {?proto.SC2APIProtocol.RequestStartReplay|undefined} value */
proto.SC2APIProtocol.Request.prototype.setStartReplay = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearStartReplay = function() {
  this.setStartReplay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasStartReplay = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RequestLeaveGame leave_game = 5;
 * @return {?proto.SC2APIProtocol.RequestLeaveGame}
 */
proto.SC2APIProtocol.Request.prototype.getLeaveGame = function() {
  return /** @type{?proto.SC2APIProtocol.RequestLeaveGame} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestLeaveGame, 5));
};


/** @param {?proto.SC2APIProtocol.RequestLeaveGame|undefined} value */
proto.SC2APIProtocol.Request.prototype.setLeaveGame = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearLeaveGame = function() {
  this.setLeaveGame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasLeaveGame = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RequestQuickSave quick_save = 6;
 * @return {?proto.SC2APIProtocol.RequestQuickSave}
 */
proto.SC2APIProtocol.Request.prototype.getQuickSave = function() {
  return /** @type{?proto.SC2APIProtocol.RequestQuickSave} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestQuickSave, 6));
};


/** @param {?proto.SC2APIProtocol.RequestQuickSave|undefined} value */
proto.SC2APIProtocol.Request.prototype.setQuickSave = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearQuickSave = function() {
  this.setQuickSave(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasQuickSave = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RequestQuickLoad quick_load = 7;
 * @return {?proto.SC2APIProtocol.RequestQuickLoad}
 */
proto.SC2APIProtocol.Request.prototype.getQuickLoad = function() {
  return /** @type{?proto.SC2APIProtocol.RequestQuickLoad} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestQuickLoad, 7));
};


/** @param {?proto.SC2APIProtocol.RequestQuickLoad|undefined} value */
proto.SC2APIProtocol.Request.prototype.setQuickLoad = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearQuickLoad = function() {
  this.setQuickLoad(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasQuickLoad = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RequestQuit quit = 8;
 * @return {?proto.SC2APIProtocol.RequestQuit}
 */
proto.SC2APIProtocol.Request.prototype.getQuit = function() {
  return /** @type{?proto.SC2APIProtocol.RequestQuit} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestQuit, 8));
};


/** @param {?proto.SC2APIProtocol.RequestQuit|undefined} value */
proto.SC2APIProtocol.Request.prototype.setQuit = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearQuit = function() {
  this.setQuit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasQuit = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional RequestGameInfo game_info = 9;
 * @return {?proto.SC2APIProtocol.RequestGameInfo}
 */
proto.SC2APIProtocol.Request.prototype.getGameInfo = function() {
  return /** @type{?proto.SC2APIProtocol.RequestGameInfo} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestGameInfo, 9));
};


/** @param {?proto.SC2APIProtocol.RequestGameInfo|undefined} value */
proto.SC2APIProtocol.Request.prototype.setGameInfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearGameInfo = function() {
  this.setGameInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasGameInfo = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional RequestObservation observation = 10;
 * @return {?proto.SC2APIProtocol.RequestObservation}
 */
proto.SC2APIProtocol.Request.prototype.getObservation = function() {
  return /** @type{?proto.SC2APIProtocol.RequestObservation} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestObservation, 10));
};


/** @param {?proto.SC2APIProtocol.RequestObservation|undefined} value */
proto.SC2APIProtocol.Request.prototype.setObservation = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearObservation = function() {
  this.setObservation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasObservation = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RequestAction action = 11;
 * @return {?proto.SC2APIProtocol.RequestAction}
 */
proto.SC2APIProtocol.Request.prototype.getAction = function() {
  return /** @type{?proto.SC2APIProtocol.RequestAction} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestAction, 11));
};


/** @param {?proto.SC2APIProtocol.RequestAction|undefined} value */
proto.SC2APIProtocol.Request.prototype.setAction = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearAction = function() {
  this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasAction = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RequestStep step = 12;
 * @return {?proto.SC2APIProtocol.RequestStep}
 */
proto.SC2APIProtocol.Request.prototype.getStep = function() {
  return /** @type{?proto.SC2APIProtocol.RequestStep} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestStep, 12));
};


/** @param {?proto.SC2APIProtocol.RequestStep|undefined} value */
proto.SC2APIProtocol.Request.prototype.setStep = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearStep = function() {
  this.setStep(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasStep = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional RequestData data = 13;
 * @return {?proto.SC2APIProtocol.RequestData}
 */
proto.SC2APIProtocol.Request.prototype.getData = function() {
  return /** @type{?proto.SC2APIProtocol.RequestData} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestData, 13));
};


/** @param {?proto.SC2APIProtocol.RequestData|undefined} value */
proto.SC2APIProtocol.Request.prototype.setData = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasData = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional RequestQuery query = 14;
 * @return {?proto.SC2APIProtocol.RequestQuery}
 */
proto.SC2APIProtocol.Request.prototype.getQuery = function() {
  return /** @type{?proto.SC2APIProtocol.RequestQuery} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestQuery, 14));
};


/** @param {?proto.SC2APIProtocol.RequestQuery|undefined} value */
proto.SC2APIProtocol.Request.prototype.setQuery = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional RequestSaveReplay save_replay = 15;
 * @return {?proto.SC2APIProtocol.RequestSaveReplay}
 */
proto.SC2APIProtocol.Request.prototype.getSaveReplay = function() {
  return /** @type{?proto.SC2APIProtocol.RequestSaveReplay} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestSaveReplay, 15));
};


/** @param {?proto.SC2APIProtocol.RequestSaveReplay|undefined} value */
proto.SC2APIProtocol.Request.prototype.setSaveReplay = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearSaveReplay = function() {
  this.setSaveReplay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasSaveReplay = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional RequestReplayInfo replay_info = 16;
 * @return {?proto.SC2APIProtocol.RequestReplayInfo}
 */
proto.SC2APIProtocol.Request.prototype.getReplayInfo = function() {
  return /** @type{?proto.SC2APIProtocol.RequestReplayInfo} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestReplayInfo, 16));
};


/** @param {?proto.SC2APIProtocol.RequestReplayInfo|undefined} value */
proto.SC2APIProtocol.Request.prototype.setReplayInfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearReplayInfo = function() {
  this.setReplayInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasReplayInfo = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional RequestAvailableMaps available_maps = 17;
 * @return {?proto.SC2APIProtocol.RequestAvailableMaps}
 */
proto.SC2APIProtocol.Request.prototype.getAvailableMaps = function() {
  return /** @type{?proto.SC2APIProtocol.RequestAvailableMaps} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestAvailableMaps, 17));
};


/** @param {?proto.SC2APIProtocol.RequestAvailableMaps|undefined} value */
proto.SC2APIProtocol.Request.prototype.setAvailableMaps = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearAvailableMaps = function() {
  this.setAvailableMaps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasAvailableMaps = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional RequestSaveMap save_map = 18;
 * @return {?proto.SC2APIProtocol.RequestSaveMap}
 */
proto.SC2APIProtocol.Request.prototype.getSaveMap = function() {
  return /** @type{?proto.SC2APIProtocol.RequestSaveMap} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestSaveMap, 18));
};


/** @param {?proto.SC2APIProtocol.RequestSaveMap|undefined} value */
proto.SC2APIProtocol.Request.prototype.setSaveMap = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearSaveMap = function() {
  this.setSaveMap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasSaveMap = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional RequestPing ping = 19;
 * @return {?proto.SC2APIProtocol.RequestPing}
 */
proto.SC2APIProtocol.Request.prototype.getPing = function() {
  return /** @type{?proto.SC2APIProtocol.RequestPing} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestPing, 19));
};


/** @param {?proto.SC2APIProtocol.RequestPing|undefined} value */
proto.SC2APIProtocol.Request.prototype.setPing = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearPing = function() {
  this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasPing = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional RequestDebug debug = 20;
 * @return {?proto.SC2APIProtocol.RequestDebug}
 */
proto.SC2APIProtocol.Request.prototype.getDebug = function() {
  return /** @type{?proto.SC2APIProtocol.RequestDebug} */ (
    jspb.Message.getWrapperField(this, proto.SC2APIProtocol.RequestDebug, 20));
};


/** @param {?proto.SC2APIProtocol.RequestDebug|undefined} value */
proto.SC2APIProtocol.Request.prototype.setDebug = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.SC2APIProtocol.Request.oneofGroups_[0], value);
};


proto.SC2APIProtocol.Request.prototype.clearDebug = function() {
  this.setDebug(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SC2APIProtocol.Request.prototype.hasDebug = function() {
  return jspb.Message.getField(this, 20) != null;
};


